

### 待完成功能点
1、心跳及重连  y
2、客户端负载均衡   y
3、配置管理      y
3、接入阿里的hessian、google的protoful序列化

2019年11月28日23:34:29
完成功能：心跳及重连
思考（*代表优先级）：
1、当前模式使用的是异步模式，考虑新增回调函数代替返回future，但通过这种方式需要引入线程池来执行回调函数。*
    目前提供监听器的方式来添加方法回调接口，由RpcClient调用远程服务返回的是ResponseFuture来自动调起, 考虑到由于使用动态代理方式生成远程服务代理，
        1、在生成代理添加入参来设置方法回调规则，由于不同规则不同，需要使用字典的方式来匹配不同的方法。
        2、用户生成RpcClient后，通过RpcClient提供的接口来进来回调方法规则设置。
    以上两种方式的监听器的执行均由Netty IO线程触发，所以会占用IO线程，这点需要注意在监听器中不能执行可能阻塞、访问数据库等耗时较长的操作。
    * 考虑提供使用业务线程池来处理回调方法的接口。
2、当前配置过期混乱，重新思考配置封装后，引入yaml文件配置的方式来优化配置方案。  **
    技术选型：
        yaml：简单、可读性强的主流文件格式，被大多数优秀开源项目采用，如docker、k8s、kafka等。
        typesafe：支持superjson的配置文件格式，接口简单，支持从本地读取配置文件，但不支持配置bean反向持久化到配置文件的操作，需自己封装。
3、代码写得很垃圾！！！多看优秀项目的源码，重构！！！。*
4、当前想搞一套支持多种协议的RPC调用框架，但觉得还是应该从简到难，先完成各个独立功能，再考虑重构抽象出一套适用的框架。*
思考：
通讯层：网络通讯长连接需要注意的地方：心跳、超时处理、连接断开重连、服务端清除无效连接、关键日志
RPC调用层：效率、权限验证、身份校验、

睡了睡了，早睡早起的计划又泡汤了。

客户端代理对象 ***  已完成

通用私有协议设计 ***
0     1       2    3      4                    18      20     22
+-----+-------+----+------+--------------------+-------+-------+
|magic|version|type|switch|        requestId           |timeout|
+-----+-------+----+------+----------------------------+-------+
|   datas  …                                  |     crc       +
+-----+-------+----+------+--------------------+-------+-------+

magic 魔数，能快判断出当前请求消息是否合法
version 版本号
type 消息类型，可能是request/response，也可能是heartbeat的msg/ack
switch 表示某些开关，crc校验


----------------------------------------------------
https://mp.weixin.qq.com/s/JRsbK1Un2av9GKmJ8DK7IQ
非常感谢阿里公众号这篇文章的帮助，使我对通信框架的设计思路更加清晰了。

